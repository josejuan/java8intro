package com.hiberus.messaging.java8db.public_.message.generated;

import com.hiberus.messaging.java8db.public_.message.Message;
import com.hiberus.messaging.java8db.public_.message.MessageEntityStoreSerializerImpl;
import com.hiberus.messaging.java8db.public_.message.MessageManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * MessageManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedMessageCacheHolder implements EntityStoreHolder<Message> {
    
    private final EntityStore<Message> entityStore;
    private final OfInt fieldIdCache;
    private final OfString fieldValueCache;
    
    public GeneratedMessageCacheHolder(
            EntityStore<Message> entityStore,
            OfInt fieldIdCache,
            OfString fieldValueCache) {
        
        this.entityStore     = requireNonNull(entityStore);
        this.fieldIdCache    = requireNonNull(fieldIdCache);
        this.fieldValueCache = requireNonNull(fieldValueCache);
    }
    
    @Override
    public EntityStore<Message> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<Message> columnId) {
        if (columnId instanceof Message.Identifier) {
            final Message.Identifier _id = (Message.Identifier) columnId;
            switch (_id) {
                case ID    : return (CACHE) fieldIdCache;
                case VALUE : return (CACHE) fieldValueCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "id"    : return (CACHE) fieldIdCache;
                case "value" : return (CACHE) fieldValueCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<Message> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedMessageCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            MessageEntityStoreSerializerImpl::new,
            TableIdentifier.of("java8db", "public", "message")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<Message> recycleAndPersist(PersistOperation<Message> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<Message> recycleAndRemove(RemoveOperation<Message> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<Message> recycleAndUpdate(UpdateOperation<Message> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<Message> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<Message>, FieldCache<?>>>of(
            Tuples.of(Message.ID,   fieldIdCache),
            Tuples.of(Message.VALUE,fieldValueCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<Message>> columnIdentifiers = Stream.<HasIdentifier<Message>>of(
            Message.ID,
            Message.VALUE
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedMessageCacheHolder> reload(CompletableFuture<EntityStore<Message>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Message.ID, FieldCache.DISTINCT);
        
        final CompletableFuture<FieldCache.OfString> fieldValueCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Message.VALUE, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedMessageCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldValueCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldValueCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                Message.Identifier.ID,
                Message.Identifier.VALUE
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}